.program IRSender_burst

.define NUM_CYCLES 21               ; how many carrier cycles to generate
.define BURST_IRQ 7                 ; which IRQ should trigger a carrier burst
.define public TICKS_PER_LOOP 4     ; the number of instructions in the loop (for timing)
.define BURSTS_1 25                 ; half the number of burst per message. (16 + 32 + 1) / 2
.define BURSTS_2 24                 ; the other half the number of burst per message. (16 + 32 + 1) / 2

.wrap_target
    pull                            ; pull the data from the FIFO into the OSR
    out EXEC 16                     ; execute the instruction from the OSR
                                    ; this will set the pindirs
                                    
    set Y (BURSTS_1 - 1)            ; set the number of bursts to generate

signal_loop_1:
    set X (NUM_CYCLES - 1)          ; initialise the loop counter
    wait 1 irq BURST_IRQ            ; wait for the IRQ then clear it

cycle_loop_1:
    set pins 31                     ; set the pin high (1 cycle)
    set pins 0 [1]                  ; set the pin low (2 cycles)
    jmp X-- cycle_loop_1            ; (1 more cycle)
    jmp Y-- signal_loop_1           

signal_loop_2_start:
    set Y (BURSTS_2 - 1)            ; set the number of bursts to generate
    
signal_loop_2:
    set X (NUM_CYCLES - 1)          ; initialise the loop counter
    wait 1 irq BURST_IRQ            ; wait for the IRQ then clear it

cycle_loop_2:
    set pins 31                     ; set the pin high (1 cycle)
    set pins 0 [1]                  ; set the pin low (2 cycles)
    jmp X-- cycle_loop_2            ; (1 more cycle)
    jmp Y-- signal_loop_2

.wrap  


% c-sdk {
static inline void IRSender_burst_program_init(PIO pio, uint sm, uint offset, uint pin, uint numPins, float freq, int bits_per_frame) {
    // Create a new state machine configuration
    pio_sm_config c = IRSender_burst_program_get_default_config(offset);

    // Map the SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, numPins);

    sm_config_set_out_shift(&c,
                        true,       // shift right
                        false,      // disable autopull
                        bits_per_frame);

    // join the FIFOs to make a single large transmit FIFO
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);


    // Set the GPIO function of the pin(connect the PIO to the pad)
    for (int i = 0; i < numPins; i++) {
        pio_gpio_init(pio, pin + i);
    }

    // Set the clock divider to generate the required frequency
    float div = clock_get_hz(clk_sys) / (freq * IRSender_burst_TICKS_PER_LOOP);
    sm_config_set_clkdiv(&c, div);

    // Apply the configuration to the state machine
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
