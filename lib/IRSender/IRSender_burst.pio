.program IRSender_burst

.define NUM_CYCLES 21               ; how many carrier cycles to generate
.define BURST_IRQ 7                 ; which IRQ should trigger a carrier burst
.define public TICKS_PER_LOOP 4     ; the number of instructions in the loop (for timing)

; Sends a carrier burst on the pin group specified by the SET pin group
; the pin group can be set by pushing a setpindirs instruction to the EXEC FIFO
; autopull must be enabled

.wrap_target

signal_loop:
    wait 1 irq BURST_IRQ            ; wait for the IRQ then clear it
    jmp !OSRE set_pindirs           ; check if there is a new instruction to execute

cycle_loop_start:
    set X (NUM_CYCLES - 1)          ; initialise the loop counter

cycle_loop:
    set pins 31                     ; set the pin high (1 cycle)
    set pins 0 [1]                  ; set the pin low (2 cycles)
    jmp X-- cycle_loop              ; repeat
    jmp signal_loop                 ; cycles done, go back to waiting for the IRQ

set_pindirs:
    out EXEC 16                     ; execute the instruction from the OSR
    jmp cycle_loop_start            ; start the cycle loop

.wrap  


% c-sdk {
static inline void IRSender_burst_program_init(PIO pio, uint sm, uint offset, uint pin, uint numPins, float freq, int bits_per_frame) {
    // Create a new state machine configuration
    pio_sm_config c = IRSender_burst_program_get_default_config(offset);

    // Map the SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, numPins);

    sm_config_set_out_shift(&c,
                        true,       // shift right
                        false,      // disable autopull
                        bits_per_frame);

    // join the FIFOs to make a single large transmit FIFO
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);


    // Set the GPIO function of the pin(connect the PIO to the pad)
    for (int i = 0; i < numPins; i++) {
        pio_gpio_init(pio, pin + i);
    }

    // Set the clock divider to generate the required frequency
    float div = clock_get_hz(clk_sys) / (freq * IRSender_burst_TICKS_PER_LOOP);
    sm_config_set_clkdiv(&c, div);

    // enable autopull
    sm_config_set_out_shift(&c, true, true, bits_per_frame);

    // Apply the configuration to the state machine
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
