;
; Copyright (c) 2021 mjcross
;
; SPDX-License-Identifier: BSD-3-Clause
;


.program nec_carrier_burst

; Generate bursts of carrier.
;
; Repeatedly wait for an IRQ to be set then clear it and generate 21 cycles of
; carrier with 25% duty cycle
;
.define NUM_CYCLES 21               ; how many carrier cycles to generate
.define BURST_IRQ 7                 ; which IRQ should trigger a carrier burst
.define public TICKS_PER_LOOP 4     ; the number of instructions in the loop (for timing)
.define CONTROL_IRQ 6               ; which IRQ should be used to start the controller
.define BURSTS_1 25                 ; half the number of burst per message. (16 + 32 + 1) / 2
.define BURSTS_2 24                 ; the other half the number of burst per message. (16 + 32 + 1) / 2

.wrap_target
    pull                            ; pull the data from the FIFO into the OSR
    out Y, 5                        ; put 5 bits from the OSR into Y
    ; set pindirs to Y
    
    set Y, BURSTS_1                 ; set the number of bursts to generate
    irq CONTROL_IRQ                 ; trigger the controller

signal_loop_1:
    set X, (NUM_CYCLES - 1)         ; initialise the loop counter
    wait 1 irq BURST_IRQ            ; wait for the IRQ then clear it

cycle_loop_1:
    set pins, 1                     ; set the pin high (1 cycle)
    set pins, 0 [1]                 ; set the pin low (2 cycles)
    jmp X--, cycle_loop_1           ; (1 more cycle)
    jmp Y-- signal_loop_1

signal_loop_2_start:
    set Y, BURSTS_2                 ; set the number of bursts to generate
    
signal_loop_2:
    set X, (NUM_CYCLES - 1)         ; initialise the loop counter
    wait 1 irq BURST_IRQ            ; wait for the IRQ then clear it

cycle_loop_2:
    set pins, 1                     ; set the pin high (1 cycle)
    set pins, 0 [1]                 ; set the pin low (2 cycles)
    jmp X--, cycle_loop_2           ; (1 more cycle)
    jmp Y--, signal_loop_2

.wrap                               ; wrap the program to the start              


% c-sdk {
static inline void nec_carrier_burst_program_init(PIO pio, uint sm, uint offset, uint pin, float freq, uint numPins) {
    // Create a new state machine configuration
    pio_sm_config c = nec_carrier_burst_program_get_default_config(offset);

    // Map the SET pin group to the state machine's pins
    sm_config_set_set_pins(&c, pin, numPins);

    // Set the GPIO function of the pins
    for (uint i = 0; i < numPins; i++) {
        pio_gpio_init(pio, pin + i);
    }

    // Set the clock divider to generate the required frequency
    float div = clock_get_hz(clk_sys) / (freq * nec_carrier_burst_TICKS_PER_LOOP);
    sm_config_set_clkdiv(&c, div);

    // Apply the configuration to the state machine
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
